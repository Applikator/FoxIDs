@page "/{tenantName}/upparties"
@inherits PageBase

<div class="d-flex">
    <div class="mr-auto p-2">
        <h3>Parties</h3>
    </div>
    <div class="p-2">
        <div class="btn-group" role="group">
            <button id="btnGroupCreateUpParty" type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="oi oi-plus" aria-hidden="true"></span> Create Up Party
            </button>
            <div class="dropdown-menu" aria-labelledby="btnGroupCreateUpParty">
                <button class="dropdown-item btn btn-link" @onclick="@(() => ShowCreateUpPartyModal(PartyTypes.Login))">Login</button>
                @*<button class="dropdown-item btn btn-link" @onclick="@(() => ShowCreateUpPartyModal(PartyTypes.Oidc))">OpenID Connect</button>*@
                <button class="dropdown-item btn btn-link" @onclick="@(() => ShowCreateUpPartyModal(PartyTypes.Saml2))">Saml 2.0</button>
            </div>
        </div>
    </div>
</div>

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link" href="@downPartyHref">Down Parties</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active">Up Parties</a>
    </li>
</ul>

<div class="tab-content">
    <PageEditForm @ref="upPartyFilterForm" TModel="FilterPartyViewModel" OnValidSubmit="OnUpPartyFilterValidSubmitAsync">
        <FInputTextFilter @bind-Value="upPartyFilterForm.Model.FilterName" For="@(() => upPartyFilterForm.Model.FilterName)" />
    </PageEditForm>

    @if (!loadPartyError.IsNullOrWhiteSpace())
    {
        <div class="alert alert-danger" role="alert">
            @loadPartyError
        </div>
    }
    <ul class="list-group list-group-flush">
        @foreach (var upParty in upParties)
        {
            <li class="list-group-item">
                <button class="btn btn-link" @onclick="@(async () => await ShowUpdateUpPartyAsync(@upParty.Type, @upParty.Name))">
                    @upParty.Name, type: @upParty.Type<br />
                </button>
            </li>
        }
    </ul>
</div>

<Modal @ref="editLoginUpPartyModal" Title="@($"{(createMode ? "Create" : "Update")} Login Up Party")">
    <PageEditForm @ref="editLoginUpPartyForm" TModel="LoginUpPartyViewModel" OnValidSubmit="OnEditLoginUpPartyValidSubmitAsync">
        <div class="modal-body">
            @if (createMode)
            {
                <div class="mb-3 alert alert-info" role="alert">
                    For every Login Up Party a separate user repository is created. User login sessions is also connected to a Login Up Party.
                </div>
            }
            <FInputText @bind-Value="editLoginUpPartyForm.Model.Name" For="@(() => editLoginUpPartyForm.Model.Name)" Focus="true" />
            <FInputToggle @bind-Value="editLoginUpPartyForm.Model.EnableCancelLogin" For="@(() => editLoginUpPartyForm.Model.EnableCancelLogin)" TextType="e.d" />
            <FInputToggle @bind-Value="editLoginUpPartyForm.Model.EnableCreateUser" For="@(() => editLoginUpPartyForm.Model.EnableCreateUser)" TextType="e.d" />
            <FInputSelect @bind-Value="editLoginUpPartyForm.Model.LogoutConsent" For="@(() => editLoginUpPartyForm.Model.LogoutConsent)">
                <option value="@LoginUpPartyLogoutConsent.IfRequered">If requered</option>
                <option value="@LoginUpPartyLogoutConsent.Always">Always</option>
                <option value="@LoginUpPartyLogoutConsent.Never">Never</option>
            </FInputSelect>
            <FInputNumber @bind-Value="editLoginUpPartyForm.Model.SessionLifetime" For="@(() => editLoginUpPartyForm.Model.SessionLifetime)" />
            <button type="button" class="btn btn-link btn-xs" @onclick="@(() => showAdvanced = !showAdvanced)">@($"{(showAdvanced ? "Hide" : "Show")} advanced settings")</button>
            @if (showAdvanced)
            {
                <FInputNumber @bind-Value="editLoginUpPartyForm.Model.SessionAbsoluteLifetime" For="@(() => editLoginUpPartyForm.Model.SessionAbsoluteLifetime)" />
                <FInputNumber @bind-Value="editLoginUpPartyForm.Model.PersistentSessionAbsoluteLifetime" For="@(() => editLoginUpPartyForm.Model.PersistentSessionAbsoluteLifetime)" />
                <FInputToggle @bind-Value="editLoginUpPartyForm.Model.PersistentSessionLifetimeUnlimited" For="@(() => editLoginUpPartyForm.Model.PersistentSessionLifetimeUnlimited)" />
                <FInputTextArea @bind-Value="editLoginUpPartyForm.Model.CssStyle" For="@(() => editLoginUpPartyForm.Model.CssStyle)" />
            }
            @if (!createMode && deleteAcknowledge)
            {
                <div class="alert alert-danger" role="alert">
                    <div>
                        You are about to delete login Up Party "@currentUpPartyName", are you sure?
                    </div>

                    <div class="mt-3">
                        <button type="button" class="btn btn-secondary" @onclick="@(async () => await DeleteLoginUpPartyAsync(currentUpPartyName))">Yes delete</button>
                        <button type="button" class="btn btn-secondary" @onclick="@(() => deleteAcknowledge = false)">No</button>
                    </div>
                </div>
            }
        </div>
        <div class="modal-footer">
            @if (!createMode)
            {
                <button type="button" class="btn btn-link" @onclick="@(() => deleteAcknowledge = true)">Delete</button>
            }
            <button type="submit" class="btn btn-primary">@(@createMode ? "Create" : "Update")</button>
            <button type="button" class="btn btn-secondary" @onclick="@(() => editLoginUpPartyModal.Hide())">Cancel</button>
        </div>
    </PageEditForm>
</Modal>

<Modal @ref="editSamlUpPartyModal" Title="@($"{(createMode ? "Create" : "Update")} Saml Up Party")">
    <PageEditForm @ref="editSamlUpPartyForm" TModel="SamlUpPartyViewModel" OnValidSubmit="OnEditSamlUpPartyValidSubmitAsync">
        <div class="modal-body">
            <FInputText @bind-Value="editSamlUpPartyForm.Model.Name" For="@(() => editSamlUpPartyForm.Model.Name)" Focus="true" />
            <FInputText @bind-Value="editSamlUpPartyForm.Model.Issuer" For="@(() => editSamlUpPartyForm.Model.Issuer)" />
            <div class="form-group active-group active">
                <div class="drag-drop-zone input-control">
                    <InputFile multiple OnChange="OnSamlUpPartyCertificateFileSelectedAsync" />
                    @samlUpPartyCertificateFileStatus
                </div>
                <Label For="@(() => editSamlUpPartyForm.Model.Keys)" class="label-control" />
                <ValidationMessage For="@(() => editSamlUpPartyForm.Model.Keys)" />
                <ul class="list-group">
                    @foreach (var certificateInfo in samlCertificateInfoList)
                    {
                        <li class="list-group-item p-0">
                            <div class="d-flex">
                                <div class="mr-auto p-2">
                                    <strong>@certificateInfo.Subject</strong><br />
                                    Valid from @certificateInfo.ValidFrom.ToShortDateString() to @certificateInfo.ValidTo.ToShortDateString()<br />
                                    Thumbprint: @certificateInfo.Thumbprint
                                </div>
                                <div class="p-2">
                                    <button type="button" class="btn btn-link p-0" title="Remove" @onclick="@(() => RemoveSamlUpPartyCertificate(certificateInfo))"><span class="oi oi-delete" aria-hidden="true"></span></button>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </div>   
            <FInputText @bind-Value="editSamlUpPartyForm.Model.AuthnUrl" For="@(() => editSamlUpPartyForm.Model.AuthnUrl)" />
            <div class="row active-group-outline">
                <div class="col">
                    <div class="form-group active-group">
                        <FInputSelect @bind-Value="editSamlUpPartyForm.Model.AuthnRequestBinding" For="@(() => editSamlUpPartyForm.Model.AuthnRequestBinding)" IncludeActiveFormGroup="false">
                            <option value="@SamlBindingType.Redirect">@SamlBindingType.Redirect</option>
                            <option value="@SamlBindingType.Post">@SamlBindingType.Post</option>
                        </FInputSelect>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group active-group">
                        <FInputSelect @bind-Value="editSamlUpPartyForm.Model.AuthnResponseBinding" For="@(() => editSamlUpPartyForm.Model.AuthnResponseBinding)" IncludeActiveFormGroup="false">
                            <option value="@SamlBindingType.Redirect">@SamlBindingType.Redirect</option>
                            <option value="@SamlBindingType.Post">@SamlBindingType.Post</option>
                        </FInputSelect>
                    </div>
                </div>
            </div>
            <FInputText @bind-Value="editSamlUpPartyForm.Model.LogoutUrl" For="@(() => editSamlUpPartyForm.Model.LogoutUrl)" />
            <div class="row active-group-outline">
                <div class="col">
                    <div class="form-group active-group">
                        <FInputSelect @bind-Value="editSamlUpPartyForm.Model.LogoutRequestBinding" For="@(() => editSamlUpPartyForm.Model.LogoutRequestBinding)" IncludeActiveFormGroup="false">
                            <option value="@SamlBindingType.Redirect">@SamlBindingType.Redirect</option>
                            <option value="@SamlBindingType.Post">@SamlBindingType.Post</option>
                        </FInputSelect>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group active-group">
                        <FInputSelect @bind-Value="editSamlUpPartyForm.Model.LogoutResponseBinding" For="@(() => editSamlUpPartyForm.Model.LogoutResponseBinding)" IncludeActiveFormGroup="false">
                            <option value="@SamlBindingType.Redirect">@SamlBindingType.Redirect</option>
                            <option value="@SamlBindingType.Post">@SamlBindingType.Post</option>
                        </FInputSelect>
                    </div>
                </div>
            </div>
            <button type="button" class="btn btn-link btn-xs" @onclick="@(() => showAdvanced = !showAdvanced)">@($"{(showAdvanced ? "Hide" : "Show")} advanced settings")</button>
            @if (showAdvanced)
            {
                <FInputSelect @bind-Value="editSamlUpPartyForm.Model.SignatureAlgorithm" For="@(() => editSamlUpPartyForm.Model.SignatureAlgorithm)">
                    <option value="@Saml2SecurityAlgorithms.RsaSha1Signature">RSA-SHA-1</option>
                    <option value="@Saml2SecurityAlgorithms.RsaSha256Signature">RSA-SHA-256</option>
                    <option value="@Saml2SecurityAlgorithms.RsaSha384Signature">RSA-SHA-384</option>
                    <option value="@Saml2SecurityAlgorithms.RsaSha512Signature">RSA-SHA-512</option>
                </FInputSelect>
                <FInputSelect @bind-Value="editSamlUpPartyForm.Model.CertificateValidationMode" For="@(() => editSamlUpPartyForm.Model.CertificateValidationMode)">
                    <option value="@X509CertificateValidationMode.None">None</option>
                    <option value="@X509CertificateValidationMode.ChainTrust">Chain trust</option>
                    <option value="@X509CertificateValidationMode.PeerTrust">Peer trust</option>
                    <option value="@X509CertificateValidationMode.PeerOrChainTrust">Peer or chain trust</option>
                </FInputSelect>
                <FInputSelect @bind-Value="editSamlUpPartyForm.Model.RevocationMode" For="@(() => editSamlUpPartyForm.Model.RevocationMode)">
                    <option value="@X509RevocationMode.NoCheck">No check</option>
                    <option value="@X509RevocationMode.Offline">Offline</option>
                    <option value="@X509RevocationMode.Online">Online</option>
                </FInputSelect>
                <FInputText @bind-Value="editSamlUpPartyForm.Model.IdSIssuer" For="@(() => editSamlUpPartyForm.Model.IdSIssuer)" />
                <FInputNumber @bind-Value="editSamlUpPartyForm.Model.MetadataLifetime" For="@(() => editSamlUpPartyForm.Model.MetadataLifetime)" />
            }
            @if (!createMode && deleteAcknowledge)
            {
                <div class="alert alert-danger" role="alert">
                    <div>
                        You are about to delete saml Up Party "@currentUpPartyName", are you sure?
                    </div>

                    <div class="mt-3">
                        <button type="button" class="btn btn-secondary" @onclick="@(async () => await DeleteSamlUpPartyAsync(currentUpPartyName))">Yes delete</button>
                        <button type="button" class="btn btn-secondary" @onclick="@(() => deleteAcknowledge = false)">No</button>
                    </div>
                </div>
            }
        </div>
        <div class="modal-footer">
            @if (!createMode)
            {
                <button type="button" class="btn btn-link" @onclick="@(() => deleteAcknowledge = true)">Delete</button>
            }
            <button type="submit" class="btn btn-primary">@(@createMode ? "Create" : "Update")</button>
            <button type="button" class="btn btn-secondary" @onclick="@(() => editSamlUpPartyModal.Hide())">Cancel</button>
        </div>
    </PageEditForm>
</Modal>

