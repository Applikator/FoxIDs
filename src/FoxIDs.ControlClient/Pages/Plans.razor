@page "/{tenantName}/plans"
@inherits PageBase

<div class="d-flex">
    <div class="mr-auto p-2">
    </div>
    <div class="p-2">
        <button type="button" class="btn btn-primary" @onclick="@(() => ShowCreatePlan())">
            <span class="oi oi-plus" aria-hidden="true"></span> Create Plan
        </button>
    </div>
</div>


<PageEditForm @ref="planFilterForm" TModel="FilterPlanViewModel" OnValidSubmit="OnPlanFilterValidSubmitAsync">
    <FInputTextFilter @bind-Value="planFilterForm.Model.FilterName" For="@(() => planFilterForm.Model.FilterName)" />
</PageEditForm>

<ul class="list-group">
    @foreach (var plan in plans)
    {
        <li class="list-group-item @(plan.Edit ? "active" : string.Empty)">
            @if (!plan.Error.IsNullOrWhiteSpace())
            {
                <div class="alert alert-danger" role="alert">
                    @plan.Error
                </div>
            }
            @if (plan.Edit)
            {
                <PageEditForm @ref="plan.Form" TModel="Plan" OnAfterInit="@(m => PlanViewModelAfterInit(plan, m))" OnValidSubmit="@(async (editContext) => await OnEditPlanValidSubmitAsync(plan, editContext))">
                    <div class="modal-header">
                        Plan
                    </div>
                    <div class="modal-body">
                        @if (plan.CreateMode)
                        {
                            <FInputText @bind-Value="plan.Form.Model.Name" For="@(() => plan.Form.Model.Name)" Focus="true" />
                        }
                        else
                        {
                            <FFieldText @bind-Value="plan.Form.Model.Name" For="@(() => plan.Form.Model.Name)" />
                            <input type="hidden" @bind="plan.Form.Model.Name" />
                        }

                        <FInputText @bind-Value="plan.Form.Model.Text" For="@(() => plan.Form.Model.Text)" />
                        <FInputText @bind-Value="plan.Form.Model.Currency" For="@(() => plan.Form.Model.Currency)" />
                        <FInputNumberD @bind-Value="plan.Form.Model.CostPerMonth" For="@(() => plan.Form.Model.CostPerMonth)" />

                        <ul class="list-group">
                            <li class="list-group-item">
                                <Label For="@(() => plan.Form.Model.ActiveUsersPerMonth)" class="label-control" />
                                <FInputNumberL @bind-Value="plan.Form.Model.ActiveUsersPerMonth.Included" For="@(() => plan.Form.Model.ActiveUsersPerMonth.Included)" />
                                <FInputNumberD @bind-Value="plan.Form.Model.ActiveUsersPerMonth.FirstLevelCost" For="@(() => plan.Form.Model.ActiveUsersPerMonth.FirstLevelCost)" />
                                <FInputNumberLN @bind-Value="plan.Form.Model.ActiveUsersPerMonth.FirstLevelThreshold" For="@(() => plan.Form.Model.ActiveUsersPerMonth.FirstLevelThreshold)" />
                                <FInputNumberDN @bind-Value="plan.Form.Model.ActiveUsersPerMonth.SecondLevelCost" For="@(() => plan.Form.Model.ActiveUsersPerMonth.SecondLevelCost)" />
                            </li>
                            <li class="list-group-item">
                                <Label For="@(() => plan.Form.Model.TokenRequestsPerMonth)" class="label-control" />
                                <FInputNumberL @bind-Value="plan.Form.Model.TokenRequestsPerMonth.Included" For="@(() => plan.Form.Model.TokenRequestsPerMonth.Included)" />
                                <FInputNumberD @bind-Value="plan.Form.Model.TokenRequestsPerMonth.FirstLevelCost" For="@(() => plan.Form.Model.TokenRequestsPerMonth.FirstLevelCost)" />
                                <FInputNumberLN @bind-Value="plan.Form.Model.TokenRequestsPerMonth.FirstLevelThreshold" For="@(() => plan.Form.Model.TokenRequestsPerMonth.FirstLevelThreshold)" />
                                <FInputNumberDN @bind-Value="plan.Form.Model.TokenRequestsPerMonth.SecondLevelCost" For="@(() => plan.Form.Model.TokenRequestsPerMonth.SecondLevelCost)" />
                            </li>
                            <li class="list-group-item">
                                <Label For="@(() => plan.Form.Model.ControlApiGetRequestsPerMonth)" class="label-control" />
                                <FInputNumberL @bind-Value="plan.Form.Model.ControlApiGetRequestsPerMonth.Included" For="@(() => plan.Form.Model.ControlApiGetRequestsPerMonth.Included)" />
                                <FInputNumberD @bind-Value="plan.Form.Model.ControlApiGetRequestsPerMonth.FirstLevelCost" For="@(() => plan.Form.Model.ControlApiGetRequestsPerMonth.FirstLevelCost)" />
                                <FInputNumberLN @bind-Value="plan.Form.Model.ControlApiGetRequestsPerMonth.FirstLevelThreshold" For="@(() => plan.Form.Model.ControlApiGetRequestsPerMonth.FirstLevelThreshold)" />
                                <FInputNumberDN @bind-Value="plan.Form.Model.ControlApiGetRequestsPerMonth.SecondLevelCost" For="@(() => plan.Form.Model.ControlApiGetRequestsPerMonth.SecondLevelCost)" />
                            </li>
                            <li class="list-group-item">
                                <Label For="@(() => plan.Form.Model.ControlApiUpdateRequestsPerMonth)" class="label-control" />
                                <FInputNumberL @bind-Value="plan.Form.Model.ControlApiUpdateRequestsPerMonth.Included" For="@(() => plan.Form.Model.ControlApiUpdateRequestsPerMonth.Included)" />
                                <FInputNumberD @bind-Value="plan.Form.Model.ControlApiUpdateRequestsPerMonth.FirstLevelCost" For="@(() => plan.Form.Model.ControlApiUpdateRequestsPerMonth.FirstLevelCost)" />
                                <FInputNumberLN @bind-Value="plan.Form.Model.ControlApiUpdateRequestsPerMonth.FirstLevelThreshold" For="@(() => plan.Form.Model.ControlApiUpdateRequestsPerMonth.FirstLevelThreshold)" />
                                <FInputNumberDN @bind-Value="plan.Form.Model.ControlApiUpdateRequestsPerMonth.SecondLevelCost" For="@(() => plan.Form.Model.ControlApiUpdateRequestsPerMonth.SecondLevelCost)" />
                            </li>
                        </ul>
                            
                        <FInputText @bind-Value="plan.Form.Model.AppInsightsKey" For="@(() => plan.Form.Model.AppInsightsKey)" />
                        <FInputText @bind-Value="plan.Form.Model.AppInsightsWorkspaceId" For="@(() => plan.Form.Model.AppInsightsWorkspaceId)" />
                    </div>
                    @if (!plan.CreateMode && plan.DeleteAcknowledge)
                    {
                        <div class="modal-footer">
                            <div class="alert alert-danger" role="alert">
                                <div>
                                    You are about to delete Plan "@plan.Name", are you sure?
                                </div>

                                <div class="mt-3">
                                    <button type="button" class="btn btn-secondary" @onclick="@(async () => await DeletePlanAsync(plan))">Yes delete plan</button>
                                    <button type="button" class="btn btn-secondary" @onclick="@(() => plan.DeleteAcknowledge = false)">No</button>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="modal-footer">
                        @if (!plan.CreateMode)
                        {
                            <button type="button" class="btn btn-link" @onclick="@(() => plan.DeleteAcknowledge = true)">Delete</button>
                        }
                        <button type="submit" class="btn btn-primary">@(plan.CreateMode ? "Create" : "Update")</button>
                        <button type="button" class="btn btn-secondary" @onclick="@(() => PlanCancel(plan))">@(@plan.CreateMode ? "Cancel" : "Close")</button>
                    </div>
                </PageEditForm>
            }
            else
            {
                <button class="btn btn-link" @onclick="@(async () => await ShowUpdatePlanAsync(plan))">
                    @PlanInfoText(plan)
                </button>
            }
        </li>
    }
</ul>