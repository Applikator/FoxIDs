@page "/{tenantName}/upparties"
@inherits PageBase

<div class="d-flex">
    <div class="mr-auto p-2">
        <h3>Parties</h3>
    </div>
    <div class="p-2">
        <div class="btn-group" role="group">
            <button id="btnGroupDrop1" type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="oi oi-plus" aria-hidden="true"></span> Create Up Party
            </button>
            <div class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                <button class="dropdown-item btn btn-link" @onclick="@(() => ShowCreateUpPartyModal(PartyTypes.Login))">Login</button>
                <button class="dropdown-item btn btn-link" @onclick="@(() => ShowCreateUpPartyModal(PartyTypes.Oidc))">OpenID Connect</button>
                <button class="dropdown-item btn btn-link" @onclick="@(() => ShowCreateUpPartyModal(PartyTypes.Saml2))">Saml 2.0</button>
            </div>
        </div>
    </div>
</div>

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link" href="@downPartyHref">Down Parties</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active">Up Parties</a>
    </li>
</ul>

<div class="tab-content">
    <div>
        <PageEditForm @ref="upPartyFilterForm" TModel="FilterPartyViewModel" OnValidSubmit="OnUpPartyFilterValidSubmitAsync">
            <FInputTextFilter @bind-Value="upPartyFilterForm.Model.FilterName" For="@(() => upPartyFilterForm.Model.FilterName)" Focus="true" />
        </PageEditForm>

        <ul class="list-group list-group-flush">
            @foreach (var upParty in upParties)
            {
                <li class="list-group-item">
                    <button class="btn btn-link" @onclick="@(async () => await ShowUpPartyAsync(@upParty.Name))">
                        @upParty.Name, type: @upParty.Type<br />
                    </button>
                </li>
            }
        </ul>
    </div>
</div>

<Modal @ref="createLoginUpPartyModal" Title="Create Login Up Party">
    <PageEditForm @ref="createLoginUpPartyForm" TModel="LoginUpPartyViewModel" OnValidSubmit="OnCreateLoginUpPartyValidSubmitAsync">
        <div class="modal-body">
            <div class="mb-3 alert alert-info" role="alert">
                For every Login Up Party a separate user repository is created. User login sessions is also connected to a Login Up Party.
            </div>
            <FInputText @bind-Value="createLoginUpPartyForm.Model.Name" For="@(() => createLoginUpPartyForm.Model.Name)" Focus="true" />
            <FInputNumber @bind-Value="createLoginUpPartyForm.Model.SessionLifetime" For="@(() => createLoginUpPartyForm.Model.SessionLifetime)" />
            <FInputNumber @bind-Value="createLoginUpPartyForm.Model.SessionAbsoluteLifetime" For="@(() => createLoginUpPartyForm.Model.SessionAbsoluteLifetime)" />
            <FInputNumber @bind-Value="createLoginUpPartyForm.Model.PersistentSessionAbsoluteLifetime" For="@(() => createLoginUpPartyForm.Model.PersistentSessionAbsoluteLifetime)" />
            <FInputToggle @bind-Value="createLoginUpPartyForm.Model.PersistentSessionLifetimeUnlimited" For="@(() => createLoginUpPartyForm.Model.PersistentSessionLifetimeUnlimited)" />
            <FInputToggle @bind-Value="createLoginUpPartyForm.Model.EnableCancelLogin" For="@(() => createLoginUpPartyForm.Model.EnableCancelLogin)" TextType="e.d" />
            <FInputToggle @bind-Value="createLoginUpPartyForm.Model.EnableCreateUser" For="@(() => createLoginUpPartyForm.Model.EnableCreateUser)" TextType="e.d" />
            <FInputSelect @bind-Value="createLoginUpPartyForm.Model.LogoutConsent" For="@(() => createLoginUpPartyForm.Model.LogoutConsent)">
                <option value="@LoginUpPartyLogoutConsent.IfRequered">@LoginUpPartyLogoutConsent.IfRequered</option>
                <option value="@LoginUpPartyLogoutConsent.Always">@LoginUpPartyLogoutConsent.Always</option>
                <option value="@LoginUpPartyLogoutConsent.Never">@LoginUpPartyLogoutConsent.Never</option>
            </FInputSelect>
            <FInputTextArea @bind-Value="createLoginUpPartyForm.Model.CssStyle" For="@(() => createLoginUpPartyForm.Model.CssStyle)"  />
        </div>
        <div class="modal-footer">
            <button type="submit" class="btn btn-primary">Create</button>
            <button type="button" class="btn btn-secondary" @onclick="@(() => createLoginUpPartyModal.Hide())">Cancel</button>
        </div>
    </PageEditForm>
</Modal>

<Modal @ref="upPartyModal" Title="Up Party">
    <div class="modal-body">
    </div>
    <div class="modal-footer">
    </div>
</Modal>


